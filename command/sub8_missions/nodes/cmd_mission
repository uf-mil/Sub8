#!/usr/bin/env python

import signal
import traceback
import argparse
from twisted.internet import defer, reactor
import exceptions
import txros
from sub8 import tx_sub
import missions


@txros.util.cancellableInlineCallbacks
def main():
    try:
        nh_args = yield txros.NodeHandle.from_argv_with_remaining('sub8_cmd_mission')

        usage_msg = ("Pass any pose editor commands. \n ex. 'forward 1' to move forward 1 meter.")
        desc_msg = "-- Command Line Missions --"
        parser = argparse.ArgumentParser(usage=usage_msg, description=desc_msg)
        parser.add_argument(dest='command', type=str,
                            help="The pose editor function")
        parser.add_argument(dest='param', type=float,
                            help="The parameter passed to the pose editor function (usually in meters or radians)")
        parser.add_argument('--speed', dest='speed', type=float, default=.3,
                            help="The speed with which to execute the function (m/s)")

        nh, args = nh_args
        args = parser.parse_args(args[1:])

        sub = yield tx_sub.get_sub(nh)
        yield sub.last_pose()
        cmd = eval("sub.move.{}({}).go(speed={})".format(args.command, args.param, args.speed))
        print "Executing sub.move.{}({}).go(speed={})".format(args.command, args.param, args.speed)
        yield cmd

    except Exception:
        traceback.print_exc()

    finally:
        print 'Finishing mission execution'
        reactor.stop()


def catch_error(error):
    print 'tx traceback'
    print '>------------------------------<'
    print error.printTraceback()
    print '>------------------------------<'


def _start():
    # Handle ctrl+C
    signal.signal(signal.SIGINT, lambda signum, frame: reactor.callFromThread(task.cancel))

    # Handle errors in main
    task = main().addErrback(lambda fail: fail.trap(defer.CancelledError))


if __name__ == '__main__':

    reactor.callWhenRunning(_start)
    reactor.run()
