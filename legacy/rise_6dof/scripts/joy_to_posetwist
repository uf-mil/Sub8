#!/usr/bin/env python

from __future__ import division

import numpy

import roslib
roslib.load_manifest('rise_6dof')
import rospy
from geometry_msgs.msg import WrenchStamped, Wrench, Vector3, Twist, Pose, Point, Quaternion, PoseStamped
from sensor_msgs.msg import Joy
from std_msgs.msg import Header
from nav_msgs.msg import Odometry
from tf import transformations

from sub8_msgs.msg import PoseTwist, PoseTwistStamped
from uf_common.orientation_helpers import xyz_array, xyzw_array, PoseEditor
roslib.load_manifest('c3_trajectory_generator')
from mil_c3_trajectory_generator.srv import SetDisabled


rospy.init_node('joy_to_posetwist')


current = rospy.wait_for_message('/odom', Odometry)
def update_current(odom):
    global current
    current = odom
rospy.Subscriber('/odom', Odometry, update_current)

pub = rospy.Publisher('/trajectory', PoseTwistStamped)

set_trajgen_disabled = rospy.ServiceProxy('/c3_trajectory_generator/set_disabled', SetDisabled)

joy_max = 0.68359375
max_vel = 1
max_angvel = 1

def cb(msg):
    enabled = msg.buttons[0] or msg.buttons[1]
    set_trajgen_disabled(enabled)
    if not enabled:
        return
    pub.publish(PoseTwistStamped(
        header=Header(
            stamp=msg.header.stamp,
            frame_id=current.header.frame_id,
        ),
        posetwist=PoseTwist(
            pose=PoseEditor.from_Odometry(current).zero_roll_and_pitch().as_Pose(),
            twist=Twist(
                linear=Vector3(*numpy.array(msg.axes[:3])/joy_max*[1,1,1 if msg.buttons[1] else 0]),
                angular=Vector3(*numpy.array(msg.axes[3:])/joy_max*[0,0,1]),
            ),
        ),
    ))
rospy.Subscriber('spacenav/joy', Joy, cb)


rospy.spin()
